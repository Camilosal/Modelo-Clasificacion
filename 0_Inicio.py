# --- Dependencias ---
import streamlit as st
import pandas as pd
from pathlib import Path
import io
from datetime import datetime
import time

# --- Importar funciones de utilidad ---
from utils import (
    load_config, get_active_topic, crear_dashboard_estado,
    INPUT_DIR,
    check_pipeline_status, mostrar_boton_wizard
)

# --- Configuraci√≥n de la P√°gina ---
st.set_page_config(
    page_title="Sistema de Clasificaci√≥n de Contratos Temas de Inter√©s",
    page_icon="assets/logo.png",
    layout="wide"
)

# --- Logo de la Entidad ---
st.sidebar.image("assets/logo.png")

# --- Secci√≥n "Acerca de" en la barra lateral ---
st.sidebar.markdown("### Acerca del Sistema")
st.sidebar.info(
    """
    **Versi√≥n:** 1.0.1\n
    **Desarrollado por:** Manuel Camilo Saldarriaga - GAEC/EMAE\n
    **Contacto:** camilosal@me.com\n
    """
)
st.sidebar.markdown(
    "Este sistema utiliza IA para ayudar en la clasificaci√≥n de contratos, "
    "aprendiendo del conocimiento experto para mejorar continuamente."
)

# --- Cargar configuraci√≥n ---
config = load_config()
ACTIVE_TOPIC = config.get("ACTIVE_TOPIC", "")

st.title("üè† Sistema de Clasificaci√≥n de Contratos CCE")

pipeline_status = check_pipeline_status(ACTIVE_TOPIC)
st.markdown("## üîé ¬øQu√© es este sistema?")
st.markdown(""" 
### üöÄ M√°s All√° de la B√∫squeda: Un Asistente Inteligente a tu Lado
Este sistema va m√°s all√° de un buscador de terminos y palabras. Es una herramienta que **analiza, comprende y aprende** de tu pericia para transformar la manera en que encuentras y clasificas la informaci√≥n.

- **üß† Inteligencia Adaptativa:** Olv√≠date de las reglas fijas. El sistema aprende directamente de tus decisiones como experto en el tema.
- **üéØ Precisi√≥n Evolutiva:** Cada contrato que validas (`SI` o `NO`) lo hace m√°s certero, refinando su capacidad de clasificaci√≥n con cada interacci√≥n.
- **ü§ù Tu Conocimiento, Escalado:** Convierte tu experiencia y criterio en un potente motor de clasificaci√≥n que trabaja de forma autom√°tica y masiva.
- **üìà Mejora Continua:** A medida que interact√∫as, el sistema se vuelve m√°s inteligente, adapt√°ndose a tus necesidades y preferencias.
- **üîÑ Clasificar no solo objetos de contratos:** puedes personalizarlo para clasificar cualquier campo de texto o categorico que configures
""")
with st.container():
    st.markdown("---")
    st.markdown("#### üéØ ¬øC√≥mo funciona?")
    st.markdown("""
    1. **T√∫ configuras** las palabras clave y par√°metros iniciales
    2. **El sistema busca** contratos candidatos usando m√∫ltiples m√©todos
    3. **T√∫ validas** los resultados (marcas como relevantes o no)
    4. **Generas un modelo** de clasificaci√≥n inteligente basado en tu retroalimentaci√≥n
    5. **Realizas an√°lisis** autom√°ticos de nuevos contratos con el modelo creado 
    """)

# --- Selecci√≥n de Flujo de Trabajo ---
st.markdown("---")
st.markdown("## ‚úçÔ∏è ¬øQu√© quieres hacer?")

# Cargar todos los temas disponibles
all_topics = list(config.get("TOPICS", {}).keys())

# Determinar el √≠ndice del tema activo
try:
    active_topic_index = all_topics.index(ACTIVE_TOPIC) if ACTIVE_TOPIC in all_topics else 0
except ValueError:
    active_topic_index = 0

# Crear una lista de opciones para el selectbox
# Usar un identificador √∫nico para la opci√≥n de crear nuevo tema
CREATE_NEW_TOPIC_OPTION = "__CREAR_NUEVO_TEMA__"
topic_options = all_topics + [CREATE_NEW_TOPIC_OPTION]

# Formatear las opciones para mostrarlas al usuario
def format_topic_option(option):
    if option == CREATE_NEW_TOPIC_OPTION:
        return "‚ûï Crear un nuevo tema de an√°lisis..."
    return f"üìÅ {option.replace('_', ' ').title()}"

# Widget para seleccionar el tema
selected_topic = st.selectbox(
    "Selecciona un tema para trabajar o crea uno nuevo:",
    options=topic_options,
    index=active_topic_index,
    format_func=format_topic_option,
    key="topic_selector"
)

# L√≥gica para manejar la selecci√≥n del usuario
if selected_topic == CREATE_NEW_TOPIC_OPTION:
    # Si el usuario quiere crear un nuevo tema, mostrar el asistente
    st.info("Se iniciar√° el asistente para configurar un nuevo tema.")
    if st.button("üöÄ Iniciar Asistente de Configuraci√≥n", type="primary"):
        st.session_state.mostrar_wizard = True
        st.rerun()
elif selected_topic and selected_topic != ACTIVE_TOPIC:
    # [FIX] Limpiar el estado de la sesi√≥n para forzar la recarga de datos del nuevo tema
    keys_to_clear = [
        'df_review', 'topic_name_for_review',
        'df_active_review', 'topic_name_for_active_review',
        'df_finetune', 'topic_name_for_finetune',
        'keywords', 'topic_name_for_keywords',
        'exclusions', 'topic_name_for_exclusions',
        'available_columns'
    ]
    for key in keys_to_clear:
        if key in st.session_state:
            del st.session_state[key]

    # Actualizar la configuraci√≥n con el nuevo tema
    config["ACTIVE_TOPIC"] = selected_topic
    from utils import save_config
    save_config(config)
    st.toast(f"‚úÖ Tema cambiado a: {selected_topic.upper()}", icon="üîÑ")
    st.rerun()
else:
    # Si el tema activo es el seleccionado, mostrar el estado actual
    if ACTIVE_TOPIC:
        st.success(f"Tema activo: **{ACTIVE_TOPIC.upper()}**")
    else:
        st.warning("No hay ning√∫n tema activo. Por favor, selecciona uno o crea uno nuevo.")

st.markdown("---")
# Crear botones de navegaci√≥n principales
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown("### ‚öôÔ∏è Configuraci√≥n")
    st.markdown("Gestionar temas, archivos y par√°metros")
    if st.button("‚öôÔ∏è Configuraci√≥n de Busqueda", type="primary", use_container_width=True):
        st.switch_page("pages/1_Configuracion_de_Busqueda.py")
with col2:
    st.markdown("### üéõÔ∏è Panel de Control")
    st.markdown("Ejecutar procesos y flujos de trabajo")
    if st.button("üéõÔ∏è Panel de Control", type="primary", use_container_width=True):
        st.switch_page("pages/2_Panel_de_Control.py")
with col3:
    st.markdown("### üè† Estado del Proyecto")
    st.markdown("Estado del proyecto actual")
    if st.button("üè† Ir a Estado del Proyecto", type="primary", use_container_width=True):
        st.switch_page("pages/3_Estado_del_Proyecto.py")
st.markdown("---")
# Mostrar wizard si es necesario
mostrar_boton_wizard()

# Agregar ayuda contextual con tooltips
st.info("üí° Esta es la p√°gina principal para usar el sistema es necesario configurar los par√°metros de an√°lisis y seguir el flujo de trabajo para clasificar contratos. Puedes navegar por las diferentes secciones usando el men√∫ de la izquierda.")

st.markdown("---")

st.markdown("#### üí° Beneficios clave:")
st.markdown("""
- **Eficiencia:** Reduce dr√°sticamente el tiempo necesario para encontrar contratos relevantes.
- **Precisi√≥n:** Identifica contratos que podr√≠an pasar desapercibidos con m√©todos tradicionales.
- **Consistencia:** Aplica un criterio uniforme en la clasificaci√≥n de todos los documentos.
- **Adaptabilidad:** Mejora continuamente gracias a la retroalimentaci√≥n del usuario.
""")

# --- Ayuda y Documentaci√≥n ---
st.markdown("## üìö Documentaci√≥n y Ayuda")

col1, col2 = st.columns(2)

with col1:
    st.markdown("### üìñ Gu√≠a de Uso")
    st.markdown("Aprende c√≥mo funciona el sistema paso a paso")
    if st.button("üìö Ver Metodolog√≠a", use_container_width=True):
        st.switch_page("pages/5_Guia_de_Uso.py")

with col2:
    st.markdown("### üìä Historial de Modelos")
    st.markdown("Revisa el rendimiento de modelos anteriores")
    if st.button("üìà Ver Historial", use_container_width=True):
        st.switch_page("pages/4_Historial_de_Modelos.py")
        
# --- Pie de p√°gina ---
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; font-size: 14px;'>
    <p>Sistema de Clasificaci√≥n Inteligente de Contratos v1.0.0</p>
    <p>Desarrollado por MCS A√±o 2025 - GAEC/EMAE - Colombia Compra Eficiente</p>
</div>
""", unsafe_allow_html=True)